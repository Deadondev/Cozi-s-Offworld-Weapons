const HDLD_FLINT="flt";
const HDLD_BALLRL="brl";
class BallAutoReloader:LeadReloadingThingy{
	default{
		//$Category "Weapons/Hideous Destructor"
		//$Title ".56 Ball Auto-Reloader"
		//$Sprite "BLDRA0"

		+weapon.wimpy_weapon
		+inventory.invbar
		+hdweapon.fitsinbackpack
		inventory.pickupsound "misc/w_pkup";
		inventory.pickupmessage "You got the ball creating machine!";
		scale 0.5;
		hdweapon.refid HDLD_BALLRL;
		tag "Ball Creating Device";
	}
	override double gunmass(){return 0;}
	override double weaponbulk(){
		return 20*amount;
	}
	override string,double getpickupsprite(){return "BLDRA0",1.;}
	override void DrawHUDStuff(HDStatusBar sb,HDWeapon hdw,HDPlayerPawn hpl){
		vector2 bob=hpl.wepbob*0.3;
		int shells=hpl.countinv("HDShellAmmo");
		double lph=(shells>=4)?1.:0.6;
		sb.drawimage("BLDRA0",(0,-64)+bob,
			sb.DI_SCREEN_CENTER_BOTTOM|sb.DI_ITEM_CENTER,
			alpha:lph,scale:(2,2)
		);
		sb.drawimage("ESHLE0",(30,-64)+bob,
			sb.DI_SCREEN_CENTER_BOTTOM|sb.DI_ITEM_CENTER|sb.DI_ITEM_LEFT,
			alpha:lph,scale:(1.9,4.7)
		);
		sb.drawstring(
			sb.psmallfont,""..shells/4,(-1,-95)+bob,
			sb.DI_TEXT_ALIGN_CENTER|sb.DI_SCREEN_CENTER_BOTTOM,
			shells?Font.CR_GOLD:Font.CR_DARKGRAY,alpha:lph
		);
	}
	override string gethelptext(){
		return
		WEPHELP_FIRE.."  Assemble rounds\n"
		..WEPHELP_USE.."+"..WEPHELP_UNLOAD.."  same"
		;
	}
	override bool AddSpareWeapon(actor newowner){return AddSpareWeaponRegular(newowner);}
	override hdweapon GetSpareWeapon(actor newowner,bool reverse,bool doselect){return GetSpareWeaponRegular(newowner,reverse,doselect);}
	action void A_CheckChug(bool anyotherconditions=true){
		if(
			anyotherconditions
			&&countinv("HDShellAmmo")>=4
		){
			invoker.makinground=true;
			int counter=min(40,countinv("HDShellAmmo"));
			invoker.shells=counter;A_TakeInventory("HDShellAmmo",counter);
			dropinventory(invoker);
		}
	}
	states{
	select0:
		TNT1 A 0 A_Raise(999);
		wait;
	deselect0:
		TNT1 A 0 A_Lower(999);
		wait;
	ready:
		TNT1 A 1 A_WeaponReady(WRF_ALLOWUSER3|WRF_ALLOWUSER4);
		goto readyend;
	fire:
		TNT1 A 0 A_CheckChug();
		goto ready;
	hold:
		TNT1 A 1;
		TNT1 A 0 A_Refire("hold");
		goto ready;
	user3:
		---- A 0{
			if(countinv("HD7mMag"))A_MagManager("HD7mMag");
			else if(countinv("HD7mClip"))A_MagManager("HD7mMag");
			else A_SelectWeapon("PickupManager");
		}
		goto ready;
		
	user4:
	unload:
		TNT1 A 1 A_CheckChug(pressinguse());
		goto ready;
	spawn:
		BLDR A -1 nodelay A_JumpIf(
			invoker.makinground
			&&invoker.shells>3
		,"chug");
		stop;
	chug:
		---- AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA 3{invoker.A_Chug();}
		---- A 10{invoker.A_MakeRound();}
		//---- A 0 {if(invoker.roundsmade>0)A_SpawnItemEx("HDLooseBall",0,0,1,1,0,3,0,SXF_NOCHECKPOSITION);invoker.roundsmade--;} //before someone says "this is hacky" yea kinda but it won't override the void code and tbh idk enough about zscript to argue. -Cozi
		---- A 0 A_Jump(256,"spawn");
	}
}

class HD_FlintlockPistol:HDHandgun{
	int targettimer;
	int targethealth;
	int targetspawnhealth;
	default{
		//$Category "Weapons/Hideous Destructor"
		//$Title "Flintlock Pistol"
		//$Sprite "FLNLA0"
		+hdweapon.fitsinbackpack
		weapon.selectionorder 300;
		weapon.slotnumber 2;
		weapon.slotpriority 3;
		weapon.kickback 100;
		weapon.bobrangex 0.21;
		weapon.bobrangey 0.86;
		scale 0.6;
		inventory.pickupmessage "You got a Flintlock Pistol! Blackbeard would be proud!";
		obituary "%o caught %k's ball.";
		hdweapon.barrelsize 6,0.3,0.5;
		tag "Flintlock Pistol";
		hdweapon.refid HDLD_FLINT;
	}
	override bool AddSpareWeapon(actor newowner){return AddSpareWeaponRegular(newowner);}
	override hdweapon GetSpareWeapon(actor newowner,bool reverse,bool doselect){return GetSpareWeaponRegular(newowner,reverse,doselect);}
	action void A_SwapHandguns(){
		let mwt=SpareWeapons(findinventory("SpareWeapons"));
		if(!mwt){
			setweaponstate("whyareyousmiling");
			return;
		}
		int pistindex=mwt.weapontype.find(invoker.getclassname());
		if(pistindex==mwt.weapontype.size()){
			setweaponstate("whyareyousmiling");
			return;
		}
		A_WeaponBusy();

		array<string> wepstat;
		string wepstat2="";
		mwt.weaponstatus[pistindex].split(wepstat,",");
		for(int i=0;i<wepstat.size();i++){
			if(i)wepstat2=wepstat2..",";
			wepstat2=wepstat2..invoker.weaponstatus[i];
			invoker.weaponstatus[i]=wepstat[i].toint();
		}
		mwt.weaponstatus[pistindex]=wepstat2;

		invoker.wronghand=!invoker.wronghand;
	}
	override void tick(){
		super.tick();
		drainheat(FLINT_HEAT,12); //was 12
	}
	override void beginplay(){
		super.beginplay();
	}
	override double gunmass(){
		double amt=weaponstatus[FLINT_BALLLOADED];
		return 6+amt*amt;
	}
	override double weaponbulk(){
		return 25;//+(weaponstatus[FLINT_BALLLOADED]=2?ENC_BALL_LOADED:0);
	}
	override string,double getpickupsprite(){return "FLNTT0",1.;}
	override void DrawHUDStuff(HDStatusBar sb,HDWeapon hdw,HDPlayerPawn hpl){
		int plf=hpl.player.getpsprite(PSP_WEAPON).frame;
		if(sb.hudlevel==1){
			sb.drawimage("BALLA0",(-48,-10),sb.DI_SCREEN_CENTER_BOTTOM,scale:(0.7,0.7));
			sb.drawnum(hpl.countinv("HDBallAmmo"),-45,-8,sb.DI_SCREEN_CENTER_BOTTOM);
		}
		if(hdw.weaponstatus[FLINT_BARREL]>=FLINT_BALLLOADED)sb.drawrect(-21,-13,5,3);
		sb.drawwepnum(
			hpl.countinv("HDBallAmmo"),
			(HDCONST_MAXPOCKETSPACE/ENC_BALL)
		);
	}
	override string gethelptext(){
		return
		WEPHELP_FIRESHOOT
		..WEPHELP_RELOAD.."+"..WEPHELP_ALTFIRE.."  load powder\n"
		..WEPHELP_RELOAD.."+"..WEPHELP_FIRE.."  load ball\n"
		..WEPHELP_ALTRELOAD.."+"..WEPHELP_FIRE.."  Thumbrod\n"
		..WEPHELP_ALTRELOAD.."+"..WEPHELP_ALTFIRE.."  Clean Barrel\n"
		..WEPHELP_ALTFIRE.."  Cock hammer\n"
		..WEPHELP_UNLOAD.."  Clear Barrel"
		;
	}
	override void DrawSightPicture(
		HDStatusBar sb,HDWeapon hdw,HDPlayerPawn hpl,
		bool sightbob,vector2 bob,double fov,bool scopeview,actor hpc
	){
		int cx,cy,cw,ch;
		[cx,cy,cw,ch]=screen.GetClipRect();
		sb.SetClipRect(
			-16+bob.x,-32+bob.y,32,38,
			sb.DI_SCREEN_CENTER
		);
		vector2 bobb=bob*2;
		sb.SetClipRect(cx,cy,cw,ch);
		sb.drawimage(
			"musktsit",(0,0)+bob,sb.DI_SCREEN_CENTER|sb.DI_ITEM_TOP,
			alpha:0.9
		);
	}
	override void DropOneAmmo(int amt){
		if(owner){
			amt=clamp(amt,1,10);
			owner.A_DropInventory("HDBallAmmo",1);
		}
	}
	override void ForceBasicAmmo(){
		owner.A_SetInventory("HDBallAmmo",1);
		
	}
	action bool HoldingRightHanded(){
		bool righthanded=invoker.wronghand;
		righthanded=
		(
			righthanded
			&&Wads.CheckNumForName("id",0)!=-1
		)||(
			!righthanded
			&&Wads.CheckNumForName("id",0)==-1
		);
		return righthanded;
	}
	action void A_CheckFlintlockHand(){
		bool righthanded=HoldingRightHanded();
		if(righthanded)player.getpsprite(PSP_WEAPON).sprite=getspriteindex("FLNR");
		else player.getpsprite(PSP_WEAPON).sprite=getspriteindex("FLNL");
	}
	
		action void A_CockHammer(bool yes=true){
		if(yes){invoker.weaponstatus[FLINT_COCKED]=2;A_StartSound("weapons/musketcock",8,CHANF_OVERLAP);}
		else invoker.weaponstatus[FLINT_COCKED]=1;
	}
	
	states{
	select0:
		---- A 0 {
			if(!countinv("NulledWeapon"))invoker.wronghand=false;
			A_TakeInventory("NulledWeapon");
			A_CheckFlintlockHand();
			invoker.weaponstatus[0]&=~FLINT_COCKED;

			//uncock all spare flintlocks
			if(findinventory("SpareWeapons")){
				let spw=SpareWeapons(findinventory("SpareWeapons"));
				for(int i=0;i<spw.weapontype.size();i++){
					if(spw.weapontype[i]==invoker.getclassname()){
						string spw2=spw.weaponstatus[i];
						string spw1=spw2.left(spw2.indexof(","));
						spw2=spw2.mid(spw2.indexof(","));
						int stat0=spw1.toint();
						stat0&=~FLINT_COCKED;
						spw.weaponstatus[i]=stat0..spw2;
					}
				}
			}
		}
		---- A 1 A_Raise();
		---- A 1 A_Raise(30);
		---- A 1 A_Raise(30);
		---- A 1 A_Raise(24);
		---- A 1 A_Raise(18);
		wait;
		goto ready;
	deselect0:
		FLNR A 0 A_CheckFlintlockHand();
		goto deselect0small;
	ready:
		FLNR A 0 A_CheckFlintlockHand();
		---- A 1 A_WeaponReady(WRF_ALL);
		goto readyend;
	// ---- THIS IS WHERE THE MUSKET CODE IS ----
	fire:
		---- A 5 offset(0,34);
		---- A 1 offset(0,34){
			A_CheckFlintlockHand();
				if(invoker.weaponstatus[FLINT_COCKED]==1){
			setweaponstate("nope");
			return;
			}
				switch (invoker.weaponStatus[FLINT_BARREL]){
					case FLINT_CORRECTRAMMED:
					A_GunFlash();
					A_StartSound("weapons/musketfire",CHAN_WEAPON);
					A_AlertMonsters();
					let tb=HDBulletActor.FireBullet(self,"HDB_Ball",spread:invoker.weaponStatus[FLINT_GUNK]/10+7,speedfactor:frandom(0.97,1.03)); //Spread is 7, gunk should make it start being affected after a lot of rounds, so about 10
					invoker.weaponstatus[FLINT_BARREL]=0;
					invoker.weaponstatus[FLINT_COCKED]=1;
					invoker.weaponstatus[FLINT_HEAT]+=20; //was 15
					invoker.weaponstatus[FLINT_GUNK]+=random(5,10); //residue left behind, randomized so maintenance is weird and funni.
					if(hd_debug)A_Log("Flintlock Gunk: "..invoker.weaponstatus[FLINT_GUNK]);
					setweaponstate("nope"); //this makes sure you don't get double heat/smoke
					break;
				/////////////////////////////////////////////////////////////////////////////////////
					case FLINT_OVERPOWDEREDRAMMED:
					A_GunFlash();
					A_StartSound("weapons/musketfire",CHAN_WEAPON);
					A_AlertMonsters();
					self.damagemobj(self,self,75,"slashing",DMG_NO_ARMOR);
					self.damagemobj(self,self,75,"hot",DMG_NO_ARMOR);
					spawn("HDExplosion",self.pos-(0,0,1),ALLOW_REPLACE);
					DistantQuaker.Quake(self,4,35,512,10);
					A_ChangeVelocity(cos(pitch)*-frandom(2,4),0,sin(pitch)*frandom(8,12),CVF_RELATIVE);
					A_MuzzleClimb(-frandom(4.,5.4),-frandom(3.4,5.2)); //doubled bc its too much lul
					A_StartSound("weapons/fgnclk",CHAN_WEAPON,CHANF_OVERLAP);
					A_SpawnItemEx("BigWallChunk",0,0,invoker.owner.height * 0.80, random(4,7),random(-2,2),random(-2,1),0,SXF_NOCHECKPOSITION);
					player.cmd.buttons|=BT_ZOOM;
					DropInventory(player.readyweapon);
					setweaponstate("nope"); //this makes sure you don't get double heat/smoke
					invoker.destroy();
					break;
				/////////////////////////////////////////////////////////////////////////////////////
					case FLINT_OVERPOWDERED:
					case FLINT_POWDERED:
					A_GunFlash();
					A_StartSound("weapons/musketfire",CHAN_WEAPON);
					A_AlertMonsters();
					A_MuzzleClimb(-frandom(4.,5.4),-frandom(3.4,5.2)); //doubled bc its too much lul
					A_StartSound("weapons/fgnclk",CHAN_WEAPON,CHANF_OVERLAP);
					invoker.weaponstatus[FLINT_BARREL]=0;
					invoker.weaponstatus[FLINT_COCKED]=1;
					invoker.weaponstatus[FLINT_HEAT]+=20;
					invoker.weaponstatus[FLINT_GUNK]+=random(5,10);//residue left behind, randomized so maintenance is weird and funni.
					if(hd_debug)A_Log("Musket Gunk: "..invoker.weaponstatus[FLINT_GUNK]);
					setweaponstate("nope"); //this makes sure you don't get double heat/smoke
					break;
				/////////////////////////////////////////////////////////////////////////////////////
					case FLINT_JUSTBALLRAMMED:
					A_StartSound("weapons/muskrodin",8,CHANF_OVERLAP);
					A_SpawnItemEx("HDBallAmmo",0,0,invoker.owner.height * 0.80, 5,0,0,0,SXF_NOCHECKPOSITION);
					invoker.weaponstatus[FLINT_BARREL]=0;
					invoker.weaponstatus[FLINT_COCKED]=1;
					break;
				/////////////////////////////////////////////////////////////////////////////////////
				default:
				break;
				invoker.weaponstatus[FLINT_BARREL]=0;
					};

		}
		---- A 2;
		goto nope;
		
	flash:
		---- BC 2 bright{
			HDFlashAlpha(0,true);
			A_Light1();

			if(gunbraced())A_GiveInventory("IsMoving",2);
			else A_GiveInventory("IsMoving",7);
			if(!binvulnerable
				&&(
					countinv("IsMoving")>6
					||floorz<pos.z
				)
			){
				A_GiveInventory("IsMoving",5);
			}
		}
		#### C 1{
			A_ZoomRecoil(0.5);
			A_Light1();
		}
		#### CB 1 A_Light0();
		#### A 0{
			int recoilside=randompick(-1,1);
			A_MuzzleClimb(
				0,0,
				-frandom(0.2,0.4),-frandom(0.6,1.),
				-frandom(0.4,0.7),-frandom(1.2,2.1),
				-frandom(0.4,0.7),-frandom(1.2,2.1)
			);
		}
		stop;
	reload: //This later should track what hand its in, thus reloading accordingly. BUT WE DONT HAVE SPRITES YET HAHHAHAHAHAAAAAAAAAAAAAAAAAAAAAAAAA -[Cozi]
		---- A 4 A_MuzzleClimb(
			-frandom(0.5,0.6),frandom(0.5,0.6),
			-frandom(0.5,0.6),frandom(0.5,0.6)
		);
		---- A 1 offset(1,34)A_StartSound("weapons/musketmove",8,CHANF_OVERLAP);
		---- A 3 offset(1,34);
		---- A 3 offset(1,34);
		---- A 3 offset(1,34);
		---- A 1 offset(2,44) A_SetTics(invoker.weaponstatus[FLINT_HEAT]>>3);
		---- A 1 offset(3,42);
		goto reloadhold;
		
	reloadhold:
		---- A 0 offset(4,34) A_CheckFlintlockHand();
		---- A 1 offset(4,34) A_JumpIf(pressingfire(),"reloadball"); //past this point should probably be in a seperate thing
		---- A 0 offset(4,34) A_JumpIf(pressingaltfire(),"reloadpowder");
		---- A 0 offset(4,34) A_JumpIf(pressingreload(),"reloadhold");
		goto reloadend;

	reloadball: //puttin' da ball in.
		---- A 0 {if(!countinv("HDBallAmmo")){setweaponstate("reload");}}// uhhh idk probably add a delay or something
		---- A 5 offset(4,34);
		---- A 3 offset(0,34){
		if(invoker.weaponstatus[FLINT_GUNK]>=50){
		A_WeaponMessage("\cgThe barrel is too dirty!",100);
		setweaponstate("reloadhold");
		} else {
		switch (invoker.weaponStatus[FLINT_BARREL]){
		case FLINT_BALLLOADED:
		case FLINT_CORRECTLOAD:
		A_WeaponMessage("\cgYou can't load two balls!",100);
		break;//////////////////////////////////////////////////////////////////
		case FLINT_POWDERED:
		A_TakeInventory("HDBallAmmo",1,TIF_NOTAKEINFINITE);
		A_StartSound("weapons/muskrodin",8,CHANF_OVERLAP);
		invoker.WeaponStatus[FLINT_BARREL]=FLINT_CORRECTLOAD;
		break;//////////////////////////////////////////////////////////////////
		case FLINT_OVERPOWDERED:
		A_TakeInventory("HDBallAmmo",1,TIF_NOTAKEINFINITE);
		A_StartSound("weapons/muskrodin",8,CHANF_OVERLAP);
		invoker.WeaponStatus[FLINT_BARREL]=FLINT_OVERPOWDEREDBALL;
		break;//////////////////////////////////////////////////////////////////
		default:
		A_TakeInventory("HDBallAmmo",1,TIF_NOTAKEINFINITE);
		A_StartSound("weapons/muskrodin",8,CHANF_OVERLAP);
		invoker.WeaponStatus[FLINT_BARREL]=FLINT_BALLLOADED;
		break;
		}}}
		---- A 5 offset(4,34);
		goto reloadhold;
		
	reloadpowder: //powderin' da toob.
		---- A 10 offset(4,34);
		---- A 3 offset(4,34) { 
		if(invoker.weaponstatus[FLINT_GUNK]>=50){
		A_WeaponMessage("\cgThe barrel is too dirty!",100);
		setweaponstate("reloadhold");
		} else {
		switch (invoker.weaponStatus[FLINT_BARREL]){
		case FLINT_POWDERED:
		A_StartSound("weapons/musketdust",8,CHANF_OVERLAP);
		invoker.WeaponStatus[FLINT_BARREL]=FLINT_OVERPOWDERED;
		break;//////////////////////////////////////////////////////////////////
		case FLINT_OVERPOWDERED:
		A_StartSound("weapons/musketdust",8,CHANF_OVERLAP);
		invoker.WeaponStatus[FLINT_BARREL]=FLINT_OVERPOWDERED;
		break;//////////////////////////////////////////////////////////////////
		case FLINT_BALLLOADED:
		A_WeaponMessage("\cgThere's already a ball in!",100);
		break;//////////////////////////////////////////////////////////////////
		case FLINT_CORRECTLOAD:
		A_WeaponMessage("\cgYou already loaded this correctly!",100);
		break;//////////////////////////////////////////////////////////////////
		default:
		A_StartSound("weapons/musketdust",8,CHANF_OVERLAP);
		invoker.WeaponStatus[FLINT_BARREL]=FLINT_POWDERED;
		break;//////////////////////////////////////////////////////////////////
		}}}
		goto reloadhold;
	user2:
	altreload: //this one's kinda clunky. oh well. - Cozi
		---- A 4 A_MuzzleClimb(
			-frandom(0.5,0.6),frandom(0.5,0.6),
			-frandom(0.5,0.6),frandom(0.5,0.6)
		);
		---- A 1 offset(0,34);
		---- A 3 offset(0,44);
		---- A 3 offset(0,58);
		---- A 3 offset(0,68);
		---- A 1 offset(0,78) A_SetTics(invoker.weaponstatus[FLINT_HEAT]>>3);
		---- A 1 offset(0,86) A_StartSound("weapons/musketmove",8,CHANF_OVERLAP);
		---- A 5 offset(0,90);
		goto altreloadhold;
		
	altreloadhold:
		---- A 1 offset(0,100) A_JumpIf(pressingfire(),"ramrod");
		---- A 0 offset(0,100) A_JumpIf(pressingaltfire(),"cleanbarrel");
		---- A 0 offset(0,100) A_JumpIf(pressingaltreload(),"altreloadhold");
		---- A 5 offset(0,100);
		goto reloadend;
		
	ramrod: //Locking in your answer
		---- A 10 offset(0,100);
		---- A 6 offset(0,100); //about double
		---- A 0 offset(0,100) {
		A_StartSound("weapons/musketrodin",8,CHANF_OVERLAP);
		
		switch (invoker.weaponStatus[FLINT_BARREL]){
		case FLINT_CORRECTLOAD:
		invoker.WeaponStatus[FLINT_BARREL]=FLINT_CORRECTRAMMED;
		break;//////////////////////////////////////////////////////////////////
		case FLINT_OVERPOWDEREDBALL:
		invoker.WeaponStatus[FLINT_BARREL]=FLINT_OVERPOWDEREDRAMMED;
		break;//////////////////////////////////////////////////////////////////
		case FLINT_BALLLOADED:
		invoker.WeaponStatus[FLINT_BARREL]=FLINT_JUSTBALLRAMMED;
		break;//////////////////////////////////////////////////////////////////
		}}
		---- A 3 offset(0,100);
		goto altreloadhold;

	cleanbarrel: //Cleaning the Barrel!
		---- A 10 offset(0,100);
		---- A 6 offset(0,100) {
		A_StartSound("weapons/musketrodin",8,CHANF_OVERLAP);
		switch (invoker.weaponStatus[FLINT_BARREL]){ // This is god awful, but honestly it's 11pm & just making it above 0 doesn't work so :) -Cozi
			case FLINT_POWDERED:
			case FLINT_BALLLOADED:
			case FLINT_JUSTBALLRAMMED:
			case FLINT_CORRECTLOAD:
			case FLINT_CORRECTRAMMED:
			case FLINT_OVERPOWDERED:
			case FLINT_OVERPOWDEREDBALL:
			case FLINT_OVERPOWDEREDRAMMED:
			A_WeaponMessage("\cgThere's something in the barrel!",10);
			break;
			default:
			if(invoker.weaponstatus[FLINT_GUNK]<10){
			A_WeaponMessage("Looks Clean.",10);
			invoker.weaponstatus[FLINT_GUNK]=0;
			} else {
			invoker.weaponstatus[FLINT_GUNK]-=random(10,25); //honestly as long as it's more/equal to than the gunk you generate, does it really matter? - Cozi
			}
			if(hd_debug)A_Log("Flintlock Gunk: "..invoker.weaponstatus[FLINT_GUNK]);
			break;
		} }
		---- A 3 offset(0,100);
		goto altreloadhold;

	unload:
		---- A 0 {if(!invoker.weaponstatus[FLINT_BARREL]==0){
		A_WeaponMessage("\cgBarrel Unloaded! This won't be as much of a pain later ;)",100);
		HDF.Give(self,"HDBallAmmo",1);
		invoker.weaponstatus[FLINT_BARREL]=0;}}
		goto ready;

	altfire:
	---- A 0 A_CheckFlintlockHand();
	---- A 0 A_JumpIf(invoker.weaponstatus[FLINT_COCKED]==2,"uncock");
	---- A 5 A_CockHammer;
	---- A 5 offset(0,34);
	---- A 0 A_JumpIf(pressingaltfire(),"nope");
	goto ready;

	uncock:
	---- A 0 A_CheckFlintlockHand();
	---- A 1 offset(0,38);
	---- A 2 offset(0,34);
	---- A 2 offset(0,36) A_StartSound("weapons/deinocyl",8,CHANF_OVERLAP);
	---- A 0 A_CockHammer(false);
	goto nope;

	reloadend:
	---- A 0 A_CheckFlintlockHand();
	---- A 1 offset(0,48);
	---- A 1 offset(0,44);
	---- A 1 offset(0,36);
	---- A 1 offset(0,33);
	---- A 2 offset(0,34);
	---- A 0 A_JumpIf(pressingunload(),"nope");
	goto ready;

	spawn:
		FLNT T -1;
		stop;
		
	////////////////////////////////////////////////////////////////////////////
	user2:
	swappistols:
		---- A 0 A_SwapHandguns();
		#### D 0 A_JumpIf(player.getpsprite(PSP_WEAPON).sprite==getspriteindex("FLNR"),"swappistols2");
	swappistols1:
		TNT1 A 0 A_Overlay(1025,"raiseright");
		TNT1 A 0 A_Overlay(1026,"lowerleft");
		TNT1 A 5;
		FLNR C 0 A_JumpIf(invoker.weaponstatus[0]&FLINT_COCKED,"nope");
		FLNR A 0;
		goto nope;
	swappistols2:
		TNT1 A 0 A_Overlay(1025,"raiseleft");
		TNT1 A 0 A_Overlay(1026,"lowerright");
		TNT1 A 5;
		FLNR C 0 A_JumpIf(invoker.weaponstatus[0]&FLINT_COCKED,"nope");
		FLNR A 0;
		goto nope;
	lowerleft:
		FLNL C 0 A_JumpIf(invoker.weaponstatus[0]&FLINT_COCKED,2);
		FLNL A 0;
		---- A 1 offset(-6,38);
		---- A 1 offset(-12,48);
		FLNL D 1 offset(-20,60);
		FLNL D 1 offset(-34,76);
		FLNL D 1 offset(-50,86);
		stop;
	lowerright:
		FLNR C 0 A_JumpIf(invoker.weaponstatus[0]&FLINT_COCKED,2);
		FLNR A 0;
		---- A 1 offset(6,38);
		---- A 1 offset(12,48);
		FLNR D 1 offset(20,60);
		FLNR D 1 offset(34,76);
		FLNR D 1 offset(50,86);
		stop;
	raiseleft:
		FLNL D 1 offset(-50,86);
		FLNL D 1 offset(-34,76);
		FLNL C 0 A_JumpIf(invoker.weaponstatus[0]&FLINT_COCKED,2);
		FLNL A 0;
		---- A 1 offset(-20,60);
		---- A 1 offset(-12,48);
		---- A 1 offset(-6,38);
		stop;
	raiseright:
		FLNR D 1 offset(50,86);
		FLNR D 1 offset(34,76);
		FLNR C 0 A_JumpIf(invoker.weaponstatus[0]&FLINT_COCKED,2);
		FLNR A 0;
		---- A 1 offset(20,60);
		---- A 1 offset(12,48);
		---- A 1 offset(6,38);
		stop;
	whyareyousmiling:
		#### D 1 offset(0,38);
		#### D 1 offset(0,48);
		#### D 1 offset(0,60);
		TNT1 A 7;
		REVG A 0{
			invoker.wronghand=!invoker.wronghand;
			A_CheckFlintlockHand();
		}
		#### D 1 offset(0,60);
		#### D 1 offset(0,48);
		#### D 1 offset(0,38);
		goto nope;
	}
	override void InitializeWepStats(bool idfa){
		weaponstatus[FLINT_BARREL]=FLINT_CORRECTRAMMED; //if any weird shit happens later delete this probably
		if(!idfa){
			weaponstatus[0]=0;
			weaponstatus[FLINT_HEAT]=0;
		}
	}
	//override void loadoutconfigure(string input){
	//}
	//for smoking barrels
	void drainheat(
		int ref,
		int smklength=18,
		double smkscale=1.,  //set to zero for no smoke at all
		double smkspeed=3.,
		double smkstartalpha=2.
	){
		if(isfrozen())return;
		if(weaponstatus[ref]>0){
			weaponstatus[ref]--;
			if(
				smkscale<=0
				||random(1,10)>weaponstatus[ref]
			)return;
			vector3 smkpos=pos;
			vector3 smkvel=vel;
			vector3 smkdir=(0,0,0);
			double smkang=angle;
			double smkpitch=pitch;
			if(owner){
				smkpos=owner.pos;
				if(
					!owner.player
					||owner.player.readyweapon==self
				){
					//spawn smoke from muzzle
					actor sccam;
					if(
						hdplayerpawn(owner)
						&&hdplayerpawn(owner).scopecamera
					)sccam=hdplayerpawn(owner).scopecamera;
					else sccam=owner;
					smkang=sccam.angle;smkpitch=sccam.pitch;
					smkdir=(cos(sccam.pitch)*(cos(smkang),sin(smkang)),-sin(sccam.pitch));
					smkpos.z=sccam.pos.z-4+smkdir.z*smklength;
					smkpos.xy+=smklength*smkdir.xy;
				}else{
					//spawn smoke from behind owner
					smkang=owner.angle;
					smkpos.z+=owner.height*0.6;
					smkpos.xy-=10*(cos(smkang),sin(smkang));
				}
				smkvel=owner.vel;
				smkpos-=smkvel;
			}
			if(!smkstartalpha)smkstartalpha=getdefaultbytype("HDBlackpowderGunSmoke").alpha;
			actor a=spawn("HDBlackpowderGunSmoke",smkpos,ALLOW_REPLACE);
			smkvel*=0.4;
			smkdir*=smkspeed;
			smkvel+=smkdir;
			a.angle=smkang;a.pitch=smkpitch;a.vel=smkvel;a.scale*=smkscale;a.alpha=smkstartalpha;
			for(int i=30;i<weaponstatus[ref];i+=30){
				if(!random(0,3)){
					a=spawn("HDBlackpowderGunSmoke",smkpos,ALLOW_REPLACE);
					a.angle=smkang;a.pitch=smkpitch;
					a.scale*=smkscale;a.alpha=smkstartalpha;
					a.vel=smkvel+(frandom(-2,2),frandom(-2,2),frandom(-2,2));
				}
			}
		}
		//also deal with spares, no smoke because lazy
		if(owner){
			let spw=spareweapons(owner.findinventory("spareweapons"));
			if(spw){
				string gcn=getclassname();
				for(int i=0;i<spw.weapontype.size();i++){
					if(spw.weapontype[i]==gcn){
						array<string> wepstat;
						spw.weaponstatus[i].split(wepstat,",");
						if(wepstat[ref].toint()>0)wepstat[ref]=""..(wepstat[ref].toint()-1);
						string newwepstat="";
						for(int j=0;j<wepstat.size();j++){
							if(j)newwepstat=newwepstat..",";
							newwepstat=newwepstat..wepstat[j];
						}
						spw.weaponstatus[i]=newwepstat;
					}
				}
			}
		}
	}
}

enum flintpistolstatus{ // There aren't any RAMMED ones bc alt. reload flips the guns dumbass - [Cozi]
	FLINT_POWDERED=1,
	FLINT_BALLLOADED=2,
	///////////////////////////////
	FLINT_CORRECTLOAD=3,
	FLINT_CORRECTRAMMED=4,
	///////////////////////////////
	FLINT_OVERPOWDERED=5,
	FLINT_OVERPOWDEREDBALL=6,
	FLINT_OVERPOWDEREDRAMMED=7,
	///////////////////////////////
	FLINT_JUSTBALLRAMMED=8,
	///////////////////////////////
	
	FLINT_COCKED=2,
	
	FLINT_BARREL=1,//this is the barrel
	FLINT_JUSTUNLOAD=32,//this one will be 7
	
	FLINT_HEAT=0,
	FLINT_GUNK=9, //Measuring tool for how much black powder residue is in the barrel. - Cozi
	FLINT_RIGHTHANDED=12, //give this mf 11 and 12 or some shit idk
};
