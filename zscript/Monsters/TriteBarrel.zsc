// ------------------------------------------------------------
// Trite Barrel
// ------------------------------------------------------------
class TriteBarrel:HDBarrel{
	int musthavegremlin;
	int spawnedtrites;
	property musthavegremlin:musthavegremlin;
	default{
		//$Category "Monsters/Hideous Destructor"
		//$Title "Spider Barrel"
		//$Sprite "BAR1A0"
}
	override void postbeginplay(){
		super.postbeginplay();
		if(
				!sv_nomonsters
				//&&(random(0,99)<hd_killerbarrels)
		){
			painsound="barrel/pain";
			A_SpawnItemEx("TriteBarrelGremlin",flags:SXF_NOCHECKPOSITION|SXF_SETMASTER);
		}
	}
	void A_BarrelMove(){
		if(spawnedtrites<5){
		if(floorz!=pos.z)return;
		A_FaceTarget();
		angle+=random(-135,135);
		//A_StartSound("barrel/walk",CHAN_BODY);
		vel.xy+=(cos(angle),sin(angle))*0.1;
		setstatelabel("inertjiggle");
		}
	}

	override void A_BarrelAttack(){
		if(spawnedtrites<5){
		A_FaceTarget(0,0);
			//A_StartSound(attacksound,CHAN_WEAPON);
			A_SpawnItemEx("Trite",frandom(0,8),frandom(0,8),frandom(24,24),frandom(8,16),frandom(0,8),frandom(0,8),frandom(0,180),SXF_NOCHECKPOSITION);spawnedtrites++;
		setstatelabel("inertjiggle");
		}
		else{setstatelabel("inertjiggle");}
	}
}

class TriteBarrelGremlin:HDActor{
	default{
		+ismonster +countkill -solid +noblockmap
		radius 0;height 0;
		-shootable
		health 1;
	}
	bool hasmoved;
	void A_TritePeek(){
		let bbb=HDBarrel(master);

		if(
			!bbb
			||bbb.health<1
		){
			bshootable=true;
			A_Die();
			return;
		}
		if(
			!target
			||target.health<1
		){
			target=null;
			hasmoved=false;
			A_LookEx(
				LOF_NOSOUNDCHECK|LOF_DONTCHASEGOAL|LOF_NOJUMP,
				maxseedist:1024, //was 512
				fov:360
			);
			if(random(0,31))return;
			bbb.A_BarrelAttack();
			return;
		}
		setorigin(bbb.pos,false);
		bbb.target=target;

		double dist=distance3d(target);// If the player gets too close, attack!
		if(
			hasmoved
			&&dist<random(0,64)
		){
			bbb.A_BarrelAttack();
			return;
		}
		if(
			dist>random(768,2048) //Player's far away!
		){
		
			bbb.A_BarrelAttack();
			hasmoved=true;
		}
	}

	states{
	spawn:
		TNT1 A 10 A_TritePeek();
		wait;
	death:
		TNT1 A 1;
		stop;
	}
}
// ------------------------------------------------------------
// "Ceiling Barrels?!"
// ------------------------------------------------------------
class CeilingTriteBarrel:TriteBarrel{
	default{
		+rollsprite; +spawnceiling; //+float;
		gravity -2; height 48;
	}
	override void A_BarrelAttack(){
		if(spawnedtrites<5){
		A_FaceTarget(0,0);
			//A_StartSound(attacksound,CHAN_WEAPON);
			A_SpawnItemEx("CeilingTrite",frandom(8,16),frandom(8,16),frandom(24,24),frandom(0,16),frandom(0,16),frandom(0,8),frandom(0,180),SXF_NOCHECKPOSITION);spawnedtrites++;
		setstatelabel("inertjiggle");
		}
		else{setstatelabel("inertjiggle");}
	}
		states{
	spawn:
		BAR2 A 10;
		loop;
	}
}

class CeilingTriteBarrelGremlin:TriteBarrelGremlin{
	default{
		+rollsprite; +spawnceiling;
		gravity -2;
	}
	void A_TritePeek(){
		let bbb=HDBarrel(master);
		//A_Changevelocity(0,0,frandom(2,4),CVF_RELATIVE);

		if(
			!bbb
			||bbb.health<1
		){
			bshootable=true;
			A_Die();
			return;
		}
		if(
			!target
			||target.health<1
		){
			target=null;
			hasmoved=false;
			A_LookEx(
				LOF_NOSOUNDCHECK|LOF_DONTCHASEGOAL|LOF_NOJUMP,
				maxseedist:1024, //was 512
				fov:360
			);
			if(random(0,31))return;
			bbb.A_BarrelAttack();
			return;
		}
		setorigin(bbb.pos,false);
		bbb.target=target;

		double dist=distance3d(target);// If the player gets too close, attack!
		if(
			hasmoved
			&&dist<random(0,64)
		){
			bbb.A_BarrelAttack();
			return;
		}
		if(
			dist>random(768,2048) //Player's far away!
		){
		
			bbb.A_BarrelAttack();
			hasmoved=true;
		}
	}

	states{
	spawn:
		TNT1 A 10 A_TritePeek();
		TNT1 A 0 givebody(3);
		
		wait;
	death:
		TNT1 A 1;
		stop;
	}
}
/*
class CeilingTriteBarrelSpawner: actor{
	states{
	spawn:
		TNT1 A 0 {A_SpawnItemEx("CeilingTriteBarrel",0,0,ceilingz,0,0,0,0,SXF_NOCHECKPOSITION);destroy;}
		wait;
	}
}